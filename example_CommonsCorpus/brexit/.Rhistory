df_long <- df_long %>%
mutate(is_no = ifelse(No==1,1,0))
View(df_long)
df_long <- df_long %>%
mutate(llm = sub("_results.*", "", rater))
View(df_long)
llm_df <- read_excel("all_llm_df2.xlsx")
df_long <- llm_df %>%
mutate(text_id = row_number()) %>%                  # add ID per text
pivot_longer(cols = -text_id, names_to = "rater", values_to = "labels") %>%
mutate(labels = str_split(labels, "\\s*,\\s*")) %>% # split multi-labels
unnest(labels) %>%
mutate(labels = str_trim(labels)) %>%
mutate(value = 1) %>%
complete(text_id, rater, labels = categories, fill = list(value = 0)) %>%
pivot_wider(names_from = labels, values_from = value)
df_long <- df_long %>% dplyr::select(-9)
# conduct t-tests for the No category
df_long <- df_long %>%
mutate(is_no = ifelse(No==1,1,0))
df_long <- df_long %>%
mutate(llm = sub("_results", "", rater))
View(df_long)
library(broom)
t_test_results <- df_long %>%
group_by(llm) %>%
summarise(
t_test = list(t.test(is_no ~ llm, data = cur_data())),
.groups = "drop"
) %>%
mutate(tidy_res = map(t_test, tidy)) %>%
select(llm, tidy_res) %>%
unnest(tidy_res)
dput(df_long[c(604:620),c(1,9,10)])
str(df_long)
df_long$llm <- as.factor(df_long$llm)
pairwise_results <- pairwise.t.test(df$is_no, df$llm, p.adjust.method = "bonferroni")
pairwise_results <- pairwise.t.test(df_long$is_no, df_long$llm, p.adjust.method = "bonferroni")
pairwise_results
anova_res <- aov(is_no ~ llm, data = df_long)
summary(anova_res)
glm_res <- glm(is_no ~ llm, data = df_long, family = binomial)
summary(glm_res)
summary_tbl <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_no = sum(is_no),                     # how many times "No" was chosen
prop_no = mean(is_no),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_no))
View(summary_tbl)
names(df_long)
df_long <- llm_df %>%
mutate(text_id = row_number()) %>%                  # add ID per text
pivot_longer(cols = -text_id, names_to = "rater", values_to = "labels") %>%
mutate(labels = str_split(labels, "\\s*,\\s*")) %>% # split multi-labels
unnest(labels) %>%
mutate(labels = str_trim(labels)) %>%
mutate(value = 1) %>%
complete(text_id, rater, labels = categories, fill = list(value = 0)) %>%
pivot_wider(names_from = labels, values_from = value)
df_long <- df_long %>% dplyr::select(-9)
df_long <- df_long %>%
mutate(is_no = ifelse(No==1,1,0)) %>%
mutate(is_economy =ifelse(`Economic or structural factors`==1, 1,0)) %>%
mutate(is_eu = ifelse(EU==1, 1,0)) %>%
mutate(is_govt = ifelse(`Previous domestic governments`==1, 1, 0)) %>%
mutate(is_others = ifelse(Others==1, 1, 0))
df_long <- df_long %>%
mutate(llm = sub("_results", "", rater))
df_long$llm <- as.factor(df_long$llm)
summary_tbl_no <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_no = sum(is_no),                     # how many times "No" was chosen
prop_no = mean(is_no),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_no))
summary_tbl_no
anova_res <- aov(is_no ~ llm, data = df_long)
summary(anova_res)
summary_tbl_no <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_no = sum(is_no),                     # how many times "No" was chosen
prop_no = mean(is_no),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_no))
summary_tbl_economy <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_economy = sum(is_economy),                     # how many times "No" was chosen
prop_economy = mean(is_economy),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_economy))
View(summary_tbl_economy)
anova_res_economy <- aov(is_economy ~ llm, data = df_long)
summary(anova_res_economy)
summary_tbl_economy <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_economy = sum(is_economy),                     # how many times "No" was chosen
prop_economy = mean(is_economy),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_economy))
View(summary_tbl_economy)
names(df_long)
anova_res_govt <- aov(is_govt ~ llm, data = df_long)
summary(anova_res_govt)
summary_tbl_govt <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_govt = sum(is_govt),                     # how many times "No" was chosen
prop_govt = mean(is_govt),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_govt))
View(summary_tbl_govt)
anova_res_eu <- aov(is_eu ~ llm, data = df_long)
summary(anova_res_eu)
summary_tbl_eu <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),                               # total number of ratings
n_eu = sum(is_eu),                     # how many times "No" was chosen
prop_eu = mean(is_eu),                 # proportion "No"
.groups = "drop"
) %>%
arrange(desc(prop_eu))
names(df_long)
library(flextable)
flextable::save_as_docx(summary_tbl_no, path = "tab_no1.docx")
getwd()
flextable::save_as_docx(summary_tbl_no, path = "C:/Users/jnjco/Dropbox/LMP_EU_Blame/tables/tab_no1.docx")
flextable::save_as_docx(
"table1" = summary_tbl_no,
path = "C:/Users/jnjco/Dropbox/LMP_EU_Blame/tables/tab_no1.docx")
summary_tbl_no <- flextable(summary_tbl_no)
flextable::save_as_docx(
"table1" = summary_tbl_no,
path = "C:/Users/jnjco/Dropbox/LMP_EU_Blame/tables/tab_no1.docx")
summary_tbl_economy <- flextable(summary_tbl_economy)
summary_tbl_eu <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_eu = sum(is_eu),
prop_eu = mean(is_eu),
.groups = "drop"
) %>%
arrange(desc(prop_eu))
summary_tbl_eu <- flextable(summary_tbl_eu)
names(df_long)
anova_res_others <- aov(is_others ~ llm, data = df_long)
summary(anova_res_others)
summary_tbl_others <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_others = sum(is_others),
prop_others = mean(is_others),
.groups = "drop"
) %>%
arrange(desc(prop_eu))
summary_tbl_others <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_others = sum(is_others),
prop_others = mean(is_others),
.groups = "drop"
) %>%
arrange(desc(prop_others))
summary_tbl_others <- flextable(summary_tbl_others)
summary_tbl_govt <- flextable(summary_tbl_govt)
flextable::save_as_docx(
"table1" = summary_tbl_no,
"table2" = summary_tbl_govt,
"table3" = summary_tbl_economy,
"table4" = summary_tbl_eu,
"table5" = summary_tbl_others,
path = "C:/Users/jnjco/Dropbox/LMP_EU_Blame/tables/tab_no1.docx")
flextable::save_as_docx(
"table1" = summary_tbl_no,
"table2" = summary_tbl_govt,
"table3" = summary_tbl_economy,
"table4" = summary_tbl_eu,
"table5" = summary_tbl_others,
path = "C:/Users/jnjco/Dropbox/LMP_EU_Blame/tables/tab_no2.docx", digits = 2)
summary_tbl_others <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_others = sum(is_others),
prop_others = mean(is_others),
.groups = "drop"
) %>%
arrange(desc(prop_others))
summary_tbl_others$prop_others <- round(summary_tbl_others$prop_others, digits = 2)
head(summary_tbl_others)
summary_tbl_others$prop_others <- round(summary_tbl_others$prop_others, digits = 3)
summary_tbl_others <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_others = sum(is_others),
prop_others = mean(is_others),
.groups = "drop"
) %>%
arrange(desc(prop_others))
summary_tbl_others$prop_others <- round(summary_tbl_others$prop_others, digits = 3)
head(summary_tbl_others)
summary_tbl_no <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_no = sum(is_no),
prop_no = mean(is_no),
.groups = "drop"
) %>%
arrange(desc(prop_no))
summary_tbl_no$prop_no <- round(summary_tbl_no$prop_no, digits = 3)
summary_tbl_no <- flextable(summary_tbl_no)
summary_tbl_economy$prop_economy <- round(summary_tbl_economy$prop_economy, digits = 3)
summary_tbl_economy <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_economy = sum(is_economy),
prop_economy = mean(is_economy),
.groups = "drop"
) %>%
arrange(desc(prop_economy))
summary_tbl_economy$prop_economy <- round(summary_tbl_economy$prop_economy, digits = 3)
summary_tbl_economy <- flextable(summary_tbl_economy)
summary_tbl_govt <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_govt = sum(is_govt),
prop_govt = mean(is_govt),
.groups = "drop"
) %>%
arrange(desc(prop_govt))
summary_tbl_govt$prop_govt <- round(summary_tbl_govt$prop_govt, digits = 3)
summary_tbl_govt <- flextable(summary_tbl_govt)
summary_tbl_eu <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_eu = sum(is_eu),
prop_eu = mean(is_eu),
.groups = "drop"
) %>%
arrange(desc(prop_eu))
summary_tbl_eu$prop_eu <- round(summary_tbl_eu$prop_eu, digits = 3)
summary_tbl_eu <- flextable(summary_tbl_eu)
summary_tbl_others <- df_long %>%
group_by(llm) %>%
summarise(
n = n(),
n_others = sum(is_others),
prop_others = mean(is_others),
.groups = "drop"
) %>%
arrange(desc(prop_others))
summary_tbl_others$prop_others <- round(summary_tbl_others$prop_others, digits = 3)
summary_tbl_others <- flextable(summary_tbl_others)
flextable::save_as_docx(
"table1" = summary_tbl_no,
"table2" = summary_tbl_govt,
"table3" = summary_tbl_economy,
"table4" = summary_tbl_eu,
"table5" = summary_tbl_others,
path = "C:/Users/jnjco/Dropbox/LMP_EU_Blame/tables/tab_no2.docx", digits = 2)
summary(anova_res_others)
summary(anova_res_no)
anova_res_no <- aov(is_no ~ llm, data = df_long)
summary(anova_res_no)
summary(anova_res_govt)
summary(anova_res_economy)
summary(anova_res_eu)
summary(anova_res_others)
irr_data <- openxlsx::read.xlsx("C:/Users/jnjco/Desktop/ParlLawSpeech/classification_sample_irr.xlsx")
View(irr_data)
dput(head(irr_data, 10))
dput(head(irr_data, 15))
irr_data <- irr_data %>%
mutate(agreements = results_llama == results_human)
View(irr_data)
sum(irr_data$agreements)
50/43
43/50
ratings <- irr_data %>% dplyr::select(results_llama, results_human)
kappa2(ratings)
ratings_matrix <- as.matrix(irr_data[, c("results_llama", "results_human")])
kripp.alpha(ratings_matrix)
kripp.alpha(ratings_matrix, method = "nominal")
View(ratings_matrix)
irr_data <- openxlsx::read.xlsx("C:/Users/jnjco/Desktop/ParlLawSpeech/classification_sample_irr.xlsx")
ratings_matrix <- as.matrix(irr_data[, c("results_llama_short", "results_human_short")])
kripp.alpha(ratings_matrix, method = "nominal")
dput(ratings_matrix)
all_levels <- unique(as.vector(ratings_matrix))  # collect all categories
ratings_factor <- apply(ratings_matrix, 2, factor, levels = all_levels)
kripp.alpha(ratings_matrix, method = "nominal")
kripp.alpha(ratings_factor, method = "nominal")
kappa2(ratings)
library(reshape2)
library(dplyr)
library(ggplot2)
library(modelsummary)
library(readxl)
uk_mapping <- read.csv("./Ward_to_PCON_to_LAD_to_UTLA_(December_2023)_Lookup_in_the_UK.csv")
getwd("C:/Users/jnjco/Desktop/UKParliamentaryCorpus/uk_parliamentary_data_example/brexit")
Setwd("C:/Users/jnjco/Desktop/UKParliamentaryCorpus/uk_parliamentary_data_example/brexit")
setwd("C:/Users/jnjco/Desktop/UKParliamentaryCorpus/uk_parliamentary_data_example/brexit")
uk_mapping <- read.csv("./Ward_to_PCON_to_LAD_to_UTLA_(December_2023)_Lookup_in_the_UK.csv")
uk_mapping <- uk_mapping %>% dplyr::select(PCON23NM, LAD23NM) %>% distinct(PCON23NM, .keep_all = T)
wage_data <- read.csv("./gross_wage_LAD.csv", check.names = F)
wage_data <- merge(wage_data, uk_mapping, by = "LAD23NM")
wage_data <- reshape2::melt(wage_data, id.vars = c("LAD23NM"), variable.name = "year", value.name = "weekly_wage")
local_gdp_data <- readxl::read_excel("./LAD_GDP_data.xlsx")
local_gdp_data <- local_gdp_data %>% select(-`ITL1 Region`, -`LA code`)
local_gdp_data <- reshape2::melt(local_gdp_data, id.vars = c("LA name"), variable.name = "year", value.name = "local_gdp", id.name = "LAD23NM")
local_gdp_data <- local_gdp_data %>% rename(LAD23NM = `LA name`)
local_gdp_data$year <- as.numeric(as.character(local_gdp_data$year))
local_gdp_data$local_gdp <- log(as.numeric(local_gdp_data$local_gdp))
econ_data <- merge(wage_data, local_gdp_data, by = c("LAD23NM", "year"))
uk_parlcorpus_application <- read.csv("./uk_parlcorpus_application.csv")
uk_parlcorpus_application <- uk_parlcorpus_application %>%
mutate(party_2 = case_when(
party %in% c("Labour Party", "Social Democratic and Labour Party",
"Labour and Co-operative") ~ "Labour Party",
party %in% c("Conservative Party") ~ "Conservative Party",
party %in% c("Liberal Democrats") ~ "Liberal Democrats",
T ~ "Others"
)) %>%
rename(LAD23NM = constituency)
uk_parlcorpus_application$year <- as.numeric(stringr::str_extract(uk_parlcorpus_application$month_year, "^.{4}"))
uk_parlcorpus_application <- merge(uk_parlcorpus_application, econ_data, by = c("LAD23NM", "year"))
uk_parlcorpus_application$weekly_wage <- as.numeric(uk_parlcorpus_application$weekly_wage)
uk_parlcorpus_application$unique_id <- paste(uk_parlcorpus_application$Constituency, uk_parlcorpus_application$Date, sep = "_")
uk_parlcorpus_application <- uk_parlcorpus_application %>%
distinct(unique_id, .keep_all = T)
uk_parlcorpus_application <- uk_parlcorpus_application %>%
mutate(Cons_Binary = case_when(party_2 == "Conservative Party" ~ "Conservative",
T ~ "Other"))
uk_parlcorpus_application$party_2 <- as.factor(uk_parlcorpus_application$party_2)
uk_parlcorpus_application$party_2 <- relevel(uk_parlcorpus_application$party_2, ref = "Others")
uk_parlcorpus_application$Cons_Binary <- as.factor(uk_parlcorpus_application$Cons_Binary)
uk_parlcorpus_application$Cons_Binary <- relevel(uk_parlcorpus_application$Cons_Binary, ref = "Other")
mod0_a <- lm(I(share_true*100) ~ log(weekly_wage)  + Cons_Binary, data = uk_parlcorpus_application)
mod0_b <- lm(I(share_true*100) ~ Value + Cons_Binary, data = uk_parlcorpus_application)
mod0_c <- lm(I(share_true*100) ~ local_gdp + Cons_Binary, data = uk_parlcorpus_application)
mod0_d <- lm(I(share_true*100) ~ log(weekly_wage) + Value + local_gdp + Cons_Binary, data = uk_parlcorpus_application)
mods_list <- list(mod0_a, mod0_b, mod0_c, mod0_d)
modelplot(mods_list, stars = T,
coef_omit = c("Intercept"),
coef_rename = c("Value"="Number of JSA/UC claimants",
"log(weekly_wage)"="Log Gross wage (week)",
"Cons_BinaryConservative" = "Conservative Party",
"local_gdp" = "Log GDP per capita"))
modelplot(mods_list, stars = T,
coef_omit = c("Intercept"),
coef_rename = c("Value"="Number of JSA/UC claimants",
"log(weekly_wage)"="Log Gross wage (week)",
"Cons_BinaryConservative" = "Conservative Party",
"local_gdp" = "Log GDP per capita"))+
theme_bw()
modelplot(mods_list, stars = T,
coef_omit = c("Intercept"),
coef_rename = c("Value"="Number of JSA/UC claimants",
"log(weekly_wage)"="Log Gross wage (week)",
"Cons_BinaryConservative" = "Conservative Party",
"local_gdp" = "Log GDP per capita"))+
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 16),
plot.subtitle = element_text(hjust = 0.5, color = "gray30"),
legend.position = "bottom"
)
modelplot(mods_list, stars = T,
coef_omit = c("Intercept"),
coef_rename = c("Value"="Number of JSA/UC claimants",
"log(weekly_wage)"="Log Gross wage (week)",
"Cons_BinaryConservative" = "Conservative Party",
"local_gdp" = "Log GDP per capita"))
uk_parlcorpus_application$log_wage <- log(uk_parlcorpus_application$weekly_wage)
mod_interaction <- lm(I(share_true*100) ~ log_wage*Cons_Binary, data = uk_parlcorpus_application)
sjPlot::plot_model(mod_interaction, type = "pred", terms = c("log_wage", "Cons_Binary"))+
labs(x="Weekly Gross Wage (log)", y="Share of parliamentary interventions on Brexit", title = "Salience on Brexit in Parliament as predicted by \n constituency weekly gross wage and partisanship of MP")+
theme_bw()+
guides(color = guide_legend(title = "Party"))
sjPlot::plot_model(mod_interaction, type = "pred", terms = c("log_wage", "Cons_Binary"))+
labs(x="Weekly Gross Wage (log)", y="Share of parliamentary interventions on Brexit", title = "Salience on Brexit in Parliament as predicted by \n constituency weekly gross wage and partisanship of MP")+
theme_minimal()+
guides(color = guide_legend(title = "Party"))
sjPlot::plot_model(mod_interaction, type = "pred", terms = c("log_wage", "Cons_Binary"))+
labs(x="Weekly Gross Wage (log)", y="Share of parliamentary interventions on Brexit", title = "Salience on Brexit in Parliament as predicted by constituency weekly gross wage and partisanship of MP")+
theme_minimal()+
guides(color = guide_legend(title = "Party"))
names(uk_parlcorpus_application)
View(uk_parlcorpus_application)
uk_mapping <- read.csv("./Ward_to_PCON_to_LAD_to_UTLA_(December_2023)_Lookup_in_the_UK.csv")
uk_mapping <- uk_mapping %>% dplyr::select(PCON23NM, LAD23NM) %>% distinct(PCON23NM, .keep_all = T)
# read in average wage data (weekly wages)
wage_data <- read.csv("./gross_wage_LAD.csv", check.names = F)
wage_data <- merge(wage_data, uk_mapping, by = "LAD23NM")
wage_data <- reshape2::melt(wage_data, id.vars = c("LAD23NM"), variable.name = "year", value.name = "weekly_wage")
# read in local gdp data
local_gdp_data <- readxl::read_excel("./LAD_GDP_data.xlsx")
local_gdp_data <- local_gdp_data %>% select(-`ITL1 Region`, -`LA code`)
local_gdp_data <- reshape2::melt(local_gdp_data, id.vars = c("LA name"), variable.name = "year", value.name = "local_gdp", id.name = "LAD23NM")
local_gdp_data <- local_gdp_data %>% rename(LAD23NM = `LA name`)
local_gdp_data$year <- as.numeric(as.character(local_gdp_data$year))
local_gdp_data$local_gdp <- log(as.numeric(local_gdp_data$local_gdp))
econ_data <- merge(wage_data, local_gdp_data, by = c("LAD23NM", "year"))
# read in parliamentary data containing information on the salience of Brexit as well as
# number of jobseekers' allowance/universal credit claimants at the constituency level
uk_parlcorpus_application <- read.csv("./uk_parlcorpus_application.csv")
uk_parlcorpus_application <- uk_parlcorpus_application %>%
mutate(party_2 = case_when(
party %in% c("Labour Party", "Social Democratic and Labour Party",
"Labour and Co-operative") ~ "Labour Party",
party %in% c("Conservative Party") ~ "Conservative Party",
party %in% c("Liberal Democrats") ~ "Liberal Democrats",
T ~ "Others"
)) %>%
rename(LAD23NM = constituency)
uk_parlcorpus_application$year <- as.numeric(stringr::str_extract(uk_parlcorpus_application$month_year, "^.{4}"))
uk_parlcorpus_application <- merge(uk_parlcorpus_application, econ_data, by = c("LAD23NM", "year"))
uk_parlcorpus_application$weekly_wage <- as.numeric(uk_parlcorpus_application$weekly_wage)
uk_parlcorpus_application$unique_id <- paste(uk_parlcorpus_application$Constituency, uk_parlcorpus_application$Date, sep = "_")
uk_parlcorpus_application <- uk_parlcorpus_application %>%
distinct(unique_id, .keep_all = T)
uk_parlcorpus_application <- uk_parlcorpus_application %>%
mutate(Cons_Binary = case_when(party_2 == "Conservative Party" ~ "Conservative",
T ~ "Other"))
uk_parlcorpus_application$party_2 <- as.factor(uk_parlcorpus_application$party_2)
uk_parlcorpus_application$party_2 <- relevel(uk_parlcorpus_application$party_2, ref = "Others")
uk_parlcorpus_application$Cons_Binary <- as.factor(uk_parlcorpus_application$Cons_Binary)
uk_parlcorpus_application$Cons_Binary <- relevel(uk_parlcorpus_application$Cons_Binary, ref = "Other")
View(uk_parlcorpus_application)
uk_parlcorpus_application$count_monthly_speech <- uk_parlcorpus_application$count_false + uk_parlcorpus_application$count_true
names(uk_parlcorpus_application)
uk_parlcorpus_sum_statistics <- uk_parlcorpus_application %>%
dplyr::select(count_monthly_speech, local_gdp, weekly_wage, Value)
datasummary(uk_parlcorpus_sum_statistics)
datasummary(data = uk_parlcorpus_sum_statistics)
datasummary(All(uk_parlcorpus_sum_statistics), formula = Mean)
datasummary(All(uk_parlcorpus_sum_statistics) ~ Mean + sd, data = uk_parlcorpus_sum_statistics)
datasummary(All(uk_parlcorpus_sum_statistics) ~ Mean + sd + Max + Min + Median, data = uk_parlcorpus_sum_statistics)
summary(uk_parlcorpus_sum_statistics)
datasummary(All(uk_parlcorpus_sum_statistics) ~ Mean + sd(na.rm = T) + Max + Min + Median, data = uk_parlcorpus_sum_statistics)
datasummary(All(uk_parlcorpus_sum_statistics) ~ Mean + SD + Max + Min + Median, data = uk_parlcorpus_sum_statistics)
uk_parlcorpus_tab_prop <- uk_parlcorpus_application %>% dplyr::select(party_2, share_true)
datasummary_crosstab(uk_parlcorpus_tab_prop)
datasummary_crosstab(formula = party_2 ~ share_true, data = uk_parlcorpus_tab_prop)
datasummary_crosstab(formula = share_true ~ party_2, data = uk_parlcorpus_tab_prop)
datasummary_crosstab(formula = share_true ~ Mean(party_2), data = uk_parlcorpus_tab_prop)
head(uk_parlcorpus_tab_prop)
summary(uk_parlcorpus_tab_prop)
uk_parlcorpus_tab_prop <- uk_parlcorpus_application %>% dplyr::select(party_2, share_true, year)
summary(uk_parlcorpus_tab_prop)
datasummary(party_2 ~ year * mean(share_true), data = uk_parlcorpus_tab_prop)
datasummary(party_2 ~ year * Mean(share_true), data = uk_parlcorpus_tab_prop)
datasummary(party_2 ~ year * Mean(share_true, na.rm = T), data = uk_parlcorpus_tab_prop)
head/uk_parlcorpus_tab_prop
head(uk_parlcorpus_tab_prop)
datasummary(
party_2 ~ year * mean(share_true),
data = uk_parlcorpus_tab_prop,
output = "latex"
)
datasummary(
party_2 ~ year * mean(share_true),
data = uk_parlcorpus_tab_prop
)
str(uk_parlcorpus_tab_prop)
datasummary(party_2 ~ year * Mean(share_true), data = uk_parlcorpus_tab_prop)
uk_parlcorpus_tab_prop <- uk_parlcorpus_application %>%
dplyr::select(party_2, share_true, year) %>%
group_by(party_2, year) %>%
summarise(mean_share_true = mean(share_true, na.rm = T))
View(uk_parlcorpus_tab_prop)
datasummary(All(uk_parlcorpus_sum_statistics) ~ Mean + SD + Max + Min + Median, data = uk_parlcorpus_sum_statistics)
datasummary(All(uk_parlcorpus_sum_statistics) ~ Mean + SD + Max + Min + Median,
data = uk_parlcorpus_sum_statistics,
output = "latex")
summary(uk_parlcorpus_application$share_true)
sd(uk_parlcorpus_application$share_true)
median(uk_parlcorpus_application$share_true)
mean(uk_parlcorpus_application$share_true)
max(uk_parlcorpus_application$share_true)
uk_parlcorpus_application$share_true <- uk_parlcorpus_application$share_true*100
mean(uk_parlcorpus_application$share_true)
sd(uk_parlcorpus_application$share_true)
max(uk_parlcorpus_application$share_true)
median(uk_parlcorpus_application$share_true)
median(uk_parlcorpus_application$share_true, na.rm = T)
